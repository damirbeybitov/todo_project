basePath: /
definitions:
  models.CreateTaskRequest:
    properties:
      description:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.CreateTaskResponse:
    properties:
      id:
        type: integer
    type: object
  models.DeleteTaskResponse:
    properties:
      message:
        type: string
    type: object
  models.DeleteUserRequest:
    properties:
      password:
        type: string
    type: object
  models.DeleteUserResponse:
    properties:
      message:
        type: string
    type: object
  models.GetTasksResponse:
    properties:
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
    type: object
  models.GetUserProfileResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  models.RefreshTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.RegisterResponse:
    properties:
      id:
        type: integer
    type: object
  models.Task:
    properties:
      description:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdateTaskRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdateTaskResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      user_id:
        type: integer
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for Todo Project
  title: Todo Project API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login for existing user
      operationId: login-user
      parameters:
      - description: User login data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: refresh user access token
      operationId: refresh-token
      parameters:
      - description: User refresh token data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RefreshTokenResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Refresh user token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register a new user
      operationId: register-user
      parameters:
      - description: User registration data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register user
      tags:
      - auth
  /task/{id}:
    delete:
      consumes:
      - application/json
      description: delete a task by ID
      operationId: delete-task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteTaskResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete task
      tags:
      - task
    get:
      consumes:
      - application/json
      description: retrieve a task by its ID
      operationId: get-task-by-id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get task by ID
      tags:
      - task
  /task/all:
    get:
      consumes:
      - application/json
      description: retrieve all tasks
      operationId: get-tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetTasksResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get tasks
      tags:
      - task
  /task/create:
    post:
      consumes:
      - application/json
      description: create a new task
      operationId: create-task
      parameters:
      - description: Task creation data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateTaskResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create task
      tags:
      - task
  /task/update:
    post:
      consumes:
      - application/json
      description: update a task
      operationId: update-task
      parameters:
      - description: Task update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateTaskResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update task
      tags:
      - task
  /user/delete:
    post:
      consumes:
      - application/json
      description: delete user by username and password
      operationId: delete-user
      parameters:
      - description: User deletion data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteUserResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - user
  /user/profile:
    get:
      description: get user profile by token
      operationId: get-user-profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserProfileResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
